// Generated by gencpp from file rl_msgs/RLEnvSeedExperience.msg
// DO NOT EDIT!


#ifndef RL_MSGS_MESSAGE_RLENVSEEDEXPERIENCE_H
#define RL_MSGS_MESSAGE_RLENVSEEDEXPERIENCE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rl_msgs
{
template <class ContainerAllocator>
struct RLEnvSeedExperience_
{
  typedef RLEnvSeedExperience_<ContainerAllocator> Type;

  RLEnvSeedExperience_()
    : from_state()
    , action(0)
    , to_state()
    , reward(0.0)
    , terminal(false)  {
    }
  RLEnvSeedExperience_(const ContainerAllocator& _alloc)
    : from_state(_alloc)
    , action(0)
    , to_state(_alloc)
    , reward(0.0)
    , terminal(false)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _from_state_type;
  _from_state_type from_state;

   typedef int32_t _action_type;
  _action_type action;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _to_state_type;
  _to_state_type to_state;

   typedef float _reward_type;
  _reward_type reward;

   typedef uint8_t _terminal_type;
  _terminal_type terminal;





  typedef boost::shared_ptr< ::rl_msgs::RLEnvSeedExperience_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rl_msgs::RLEnvSeedExperience_<ContainerAllocator> const> ConstPtr;

}; // struct RLEnvSeedExperience_

typedef ::rl_msgs::RLEnvSeedExperience_<std::allocator<void> > RLEnvSeedExperience;

typedef boost::shared_ptr< ::rl_msgs::RLEnvSeedExperience > RLEnvSeedExperiencePtr;
typedef boost::shared_ptr< ::rl_msgs::RLEnvSeedExperience const> RLEnvSeedExperienceConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rl_msgs::RLEnvSeedExperience_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rl_msgs::RLEnvSeedExperience_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace rl_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'rl_msgs': ['/home/justin/ros_test/src/rl-texplore-ros-pkg-master/src/rl_msgs/msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::rl_msgs::RLEnvSeedExperience_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rl_msgs::RLEnvSeedExperience_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rl_msgs::RLEnvSeedExperience_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rl_msgs::RLEnvSeedExperience_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rl_msgs::RLEnvSeedExperience_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rl_msgs::RLEnvSeedExperience_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rl_msgs::RLEnvSeedExperience_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e195f7b7c1a41138d96a4af2de05b1b1";
  }

  static const char* value(const ::rl_msgs::RLEnvSeedExperience_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe195f7b7c1a41138ULL;
  static const uint64_t static_value2 = 0xd96a4af2de05b1b1ULL;
};

template<class ContainerAllocator>
struct DataType< ::rl_msgs::RLEnvSeedExperience_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rl_msgs/RLEnvSeedExperience";
  }

  static const char* value(const ::rl_msgs::RLEnvSeedExperience_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rl_msgs::RLEnvSeedExperience_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Message that contains a seed experience to initialize the model\n\
float32[] from_state\n\
int32     action\n\
float32[] to_state\n\
float32   reward\n\
bool      terminal\n\
\n\
";
  }

  static const char* value(const ::rl_msgs::RLEnvSeedExperience_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rl_msgs::RLEnvSeedExperience_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.from_state);
      stream.next(m.action);
      stream.next(m.to_state);
      stream.next(m.reward);
      stream.next(m.terminal);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RLEnvSeedExperience_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rl_msgs::RLEnvSeedExperience_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rl_msgs::RLEnvSeedExperience_<ContainerAllocator>& v)
  {
    s << indent << "from_state[]" << std::endl;
    for (size_t i = 0; i < v.from_state.size(); ++i)
    {
      s << indent << "  from_state[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.from_state[i]);
    }
    s << indent << "action: ";
    Printer<int32_t>::stream(s, indent + "  ", v.action);
    s << indent << "to_state[]" << std::endl;
    for (size_t i = 0; i < v.to_state.size(); ++i)
    {
      s << indent << "  to_state[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.to_state[i]);
    }
    s << indent << "reward: ";
    Printer<float>::stream(s, indent + "  ", v.reward);
    s << indent << "terminal: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.terminal);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RL_MSGS_MESSAGE_RLENVSEEDEXPERIENCE_H
