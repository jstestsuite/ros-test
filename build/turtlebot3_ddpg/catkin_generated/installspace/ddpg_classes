
import rospy
import os
import json

import random
import time
import sys
import numpy as np
import math
sys.path.append(os.path.dirname(os.path.abspath(os.path.dirname(__file__))))
from collections import deque
from std_msgs.msg import Float32MultiArray
from src.turtlebot3_ddpg.environment_stage_1 import Env
import tensorflow as tf
from tensorflow.keras.models import Sequential, load_model
from tensorflow.keras.optimizers import RMSprop
from tensorflow.keras.layers import Dense, Dropout, Activation, Input

from tensorflow import keras

from tensorflow.keras.models import Model


from tensorflow.keras import backend

from actor_class import Actor
from critic_class import Critic

EPISODES = 3000
GAMMA = 0.99
TAU = 0.001
LRA = 0.0001    #Learning rate for Actor
LRC = 0.001 #Lerning rate for Critic
state_dim = 14
batch_size = 32
max_step = 400
memory = deque(maxlen=1000000)

class OrnsteinUhlenbeckActionNoise:
    def __init__(self, mu, sigma=0.3, theta=.15, dt=1e-2, x0=None):
        self.theta = theta
        self.mu = mu
        self.sigma = sigma
        self.dt = dt
        self.x0 = x0
        self.reset()

    def __call__(self):
        x = self.x_prev + self.theta * (self.mu - self.x_prev) * self.dt + \
                self.sigma * np.sqrt(self.dt) * np.random.normal(size=self.mu.shape)
        self.x_prev = x
        return x

    def reset(self):
        self.x_prev = self.x0 if self.x0 is not None else np.zeros_like(self.mu)

    def __repr__(self):
        return 'OrnsteinUhlenbeckActionNoise(mu={}, sigma={})'.format(self.mu, self.sigma)
    


def appendMemory(memory, state, action, reward, next_state, done):
       return memory.append((state, action, reward, next_state, done))

#need to analyze
if __name__ == '__main__':
    rospy.init_node('turtlebot3_dqn_stage_1')
    pub_result = rospy.Publisher('result', Float32MultiArray, queue_size=5)
    pub_get_action = rospy.Publisher('get_action', Float32MultiArray, queue_size=5)


    sess = tf.Session()
    backend.set_session(sess)

    actor = Actor(sess, state_dim, TAU, LRA)
    critic = Critic(sess, state_dim, TAU, LRC)

    result = Float32MultiArray()
    get_action = Float32MultiArray()
    past_action = np.zeros((1,2))

    env = Env(2)


    scores, episodes = [], []
    global_step = 0
    start_time = time.time()
    print "Starting to train the models.  Success?'"
    print '...'
    print '...'
    print '...'
    actor_noise = OrnsteinUhlenbeckActionNoise(mu=np.zeros(2))

    for e in range(EPISODES):
        done = False
        state = env.reset()
        score = 0
	
        for t in range(max_step):



            action = actor.model.predict(state.reshape(1, len(state)))+ actor_noise()
	

	    #print "ACTION IS PRINTED"
            next_state, reward, done = env.step(action.flatten(), past_action.flatten())
	    #print len(state), "\n"
            appendMemory(memory, state, action, reward, next_state, done)
	    #### Start the training

	    if memory.size() > batch_size:
            	env.pause_proxy()
            	mini_batch = random.sample(memory, batch_size)
            	states = mini_batch[0]
            	actions = mini_batch[1]
            	rewards = mini_batch[2]
            	next_states = mini_batch[3]
            	dones = mini_batch[4]
	    
#reshape?
	    	target_q = critic.target_model.predict([next_states, actor.target_model.predict(next_states)])

                y_i = []
                for k in range(batch_size):
                    if done[k]:
                        y_i.append(rewards[k])
                    else:
			y_i.append(rewards[k] + GAMMA * target_q[k])

                loss += critic.model.train_on_batch([states,actions], y_i) 
                a_for_grad = actor.model.predict(states)
                grads = critic.gradients(states, a_for_grad)
                actor.train(states, grads)
                actor.target_train()
		critic.target_train()
		env.pause_proxy()
            score += reward
            state = next_state


            if t >= 400:
                rospy.loginfo("Time out!!")
                done = True

            if done:
                result.data = [score, np.max(agent.q_value)]
                pub_result.publish(result)
                agent.updateTargetModel()
                scores.append(score)
                episodes.append(e)
                m, s = divmod(int(time.time() - start_time), 60)
                h, m = divmod(m, 60)

                rospy.loginfo('Ep: %d score: %.2f memory: %d epsilon: %.2f time: %d:%02d:%02d',
                              e, score, len(agent.memory), agent.epsilon, h, m, s)
                param_keys = ['epsilon']
                param_values = [agent.epsilon]
                param_dictionary = dict(zip(param_keys, param_values))
                break

            global_step += 1
           # if global_step % agent.target_update == 0:
            #    rospy.loginfo("UPDATE TARGET NETWORK")

        if agent.epsilon > agent.epsilon_min:
            agent.epsilon *= agent.epsilon_decay
